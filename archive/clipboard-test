#!/usr/bin/env python3

import datetime
import sys

import gi

gi.require_version("Gdk", "4.0")
gi.require_version("Gtk", "4.0")
gi.require_version("Adw", "1")
from gi.repository import Gdk, Gtk, Adw, GdkPixbuf

img_path = '/home/reece/Pictures/avatars/Speed-Racer-speed-racer-485532_701_576.jpg'

class MainWindow(Gtk.ApplicationWindow):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.box1 = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, homogeneous=False)
        self.picture = Gtk.Picture()
        pixbuf = GdkPixbuf.Pixbuf.new_from_file(img_path)
        self.picture.set_pixbuf(pixbuf)


        self.box2 = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL)
        self.button = Gtk.Button(label="update")
        self.button.connect("clicked", self.update_from_clipboard)
        self.message_box = Gtk.Label()

        self.box1.append(self.picture)
        self.box1.append(self.box2)
        self.box2.append(self.button)
        self.box2.append(self.message_box)
        self.set_child(self.box1)

        self.set_default_size(800, 450)
        self.set_title("Clipboard App")

    def update_from_clipboard(self, button):
        clipboard = self.get_clipboard()
        clipboard_formats = clipboard.get_formats()

        def update_cb(so, res, user_data):
            texture = clipboard.read_texture_finish(res)
            pixbuf = Gdk.pixbuf_get_from_texture(texture)
            ts = datetime.datetime.now().isoformat()
            size = f"{texture.get_width()} x {texture.get_height()}"
            message = "\n".join([
                f"{ts=}",
                f"{size=}",
                f"{clipboard.is_local()=}",
                f"{clipboard_formats.to_string()=}",
            ])
            self.message_box.set_text(message)
            self.picture.set_pixbuf(pixbuf)

        clipboard.read_texture_async(
            cancellable=None, callback=update_cb, user_data=None
        )


class MyApp(Adw.Application):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.connect("activate", self.on_activate)

    def on_activate(self, app):
        self.app = app
        self.main_window = MainWindow(application=app)
        self.main_window.present()


app = MyApp(application_id="com.reecehart.clipboard_test")
app.run(sys.argv)
